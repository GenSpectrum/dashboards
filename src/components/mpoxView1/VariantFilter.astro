---
interface Props {
    initialClade?: string;
    initialLineage?: string;
}
const { initialClade, initialLineage } = Astro.props;
---

<variant-filter data-message={JSON.stringify({ clade: initialClade, lineage: initialLineage })}>
    <div class='flex flex-col items-stretch gap-2'>
        <gs-text-input
            id='clade-filter'
            lapisField='clade'
            placeholderText='Clade'
            initialValue={initialClade}
            width='100%'></gs-text-input>
        <gs-text-input
            id='lineage-filter'
            lapisField='lineage'
            placeholderText='Lineage'
            initialValue={initialLineage}
            width='100%'></gs-text-input>
        <button id='variantFilterSubmitButton' class='rounded-lg border bg-white p-4 hover:bg-amber-200' type='submit'>
            Submit
        </button>
    </div>
</variant-filter>

<script>
    import { Routing } from '../../routes/routing.ts';
    import { MpoxView1 } from '../../routes/mpoxView1';

    class VariantFilter extends HTMLElement {
        constructor() {
            super();
            let { clade, lineage } = JSON.parse(this.dataset.message);
            const cladeFilter = document.getElementById('clade-filter');
            const lineageFilter = document.getElementById('lineage-filter');
            const submitButton = document.getElementById('variantFilterSubmitButton');

            cladeFilter.addEventListener('gs-text-input-changed', (event: CustomEvent) => {
                clade = event.detail.clade;
            });
            lineageFilter.addEventListener('gs-text-input-changed', (event: CustomEvent) => {
                lineage = event.detail.lineage;
            });

            submitButton.addEventListener('click', () => {
                const currentRoute = Routing.getCurrentRouteInBrowser()! as MpoxView1.Route;
                const newRoute = {
                    ...currentRoute,
                    variantFilter: { clade, lineage },
                };
                Routing.navigateTo(newRoute);
            });
        }
    }

    customElements.define('variant-filter', VariantFilter);
</script>
