---
import type { SelectedFilter } from '../../components/subscriptions/SubscriptionFilter';
import type { Filter } from '../../components/subscriptions/SubscriptionFilter';
import BaseLayout from '../../layouts/base/BaseLayout.astro';
import { Subscriptions } from '../../components/subscriptions/Subscriptions';
import { type Subscription } from '../../types/Subscription';

const subscriptions: Subscription[] = [
    {
        id: '1',
        active: false,
        name: 'My search',
        interval: 'weekly',
        dateWindow: 'last6Months',
        trigger: {
            type: 'count',
            count: 10,
            filter: {
                country: 'Germany',
                ageFrom: '20',
            },
        },
        organism: 'covid',
        notificationChannelIds: {
            email: ['1'],
            slack: ['3'],
        },
        conditionsMet: false,
    },
    {
        id: '2',
        active: true,
        name: 'My other search',
        interval: 'daily',
        dateWindow: 'last6Months',
        trigger: {
            type: 'count',
            count: 20,
            filter: { country: 'Switzerland', ageFrom: '20', pangoLineage: 'B.1.1.7' },
        },
        organism: 'covid',
        notificationChannelIds: {
            email: ['2'],
            slack: ['4'],
        },
        conditionsMet: true,
    },
    {
        id: '3',
        active: true,
        name: 'My third search',
        interval: 'weekly',
        dateWindow: 'last6Months',
        trigger: {
            type: 'proportion',
            proportion: 13,
            numeratorFilter: {
                country: 'Germany',
                ageFrom: '20',
            },
            denominatorFilter: { country: 'Germany' },
        },
        organism: 'rsvA',
        notificationChannelIds: {
            email: ['1'],
            slack: ['3'],
        },
        conditionsMet: false,
    },
];

const getFilters = (subscriptions: Subscription[]): Filter[] => {
    const filters = subscriptions.map((subscription) => subscription.organism);
    const uniqueFilters = Array.from(new Set(filters));

    return uniqueFilters.map((uniqueFilter) => ({
        name: uniqueFilter,
        count: filters.filter((filter) => uniqueFilter === filter).length,
    }));
};

const getSelectedFilters = (filters: Filter[]): SelectedFilter[] => {
    const searchParams = Astro.url.searchParams.getAll('organism');

    if (searchParams.length === 0) {
        return filters.map((filter) => ({ ...filter, selected: true }));
    }

    return filters.map((filter) => ({
        ...filter,
        selected: searchParams.includes(filter.name),
    }));
};

const filters = getFilters(subscriptions);
const selectedFilters = getSelectedFilters(filters);
---

<BaseLayout title='Subscriptions' omitHeaderNavigation={true}>
    <Subscriptions client:load filters={selectedFilters} subscriptions={subscriptions} />
</BaseLayout>
