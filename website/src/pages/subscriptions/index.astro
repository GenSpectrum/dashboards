---
import type { SelectedFilter } from '../../components/subscriptions/SubscriptionFilter';
import type { Filter } from '../../components/subscriptions/SubscriptionFilter';
import BaseLayout from '../../layouts/base/BaseLayout.astro';
import { Subscriptions } from '../../components/subscriptions/Subscriptions';
import type { Subscription } from '../../components/subscriptions/SubscriptionTable';

const subscriptions: Subscription[] = [
    {
        id: '1',
        name: 'My search',
        filter: {
            country: 'Germany',
            dateFrom: '2024-01-01',
            dateTo: '2024-01-05',
        },
        interval: 'weekly',
        dateWindow: 'last6Months',
        trigger: 'count: 10',
        active: true,
        conditionsMet: true,
        organism: 'covid',
    },
    {
        id: '2',
        name: 'My other search',
        filter: {
            country: 'Switzerland',
            dateFrom: '2024-01-01',
            dateTo: '2024-01-05',
        },
        interval: 'daily',
        dateWindow: 'last6Months',
        trigger: 'count: 20',
        active: true,
        conditionsMet: false,
        organism: 'covid',
    },
    {
        id: '3',
        name: 'My third search',
        filter: {
            country: 'Germany',
            dateFrom: '2024-01-01',
            dateTo: '2024-01-05',
        },
        interval: 'weekly',
        dateWindow: 'last6Months',
        trigger: 'count: 13',
        active: true,
        conditionsMet: true,
        organism: 'rsv-a',
    },
];

const getFilters = (subscriptions: Subscription[]): Filter[] => {
    const filters = subscriptions.map((subscription) => subscription.organism);
    const uniqueFilters = Array.from(new Set(filters));

    return uniqueFilters.map((uniqueFilter) => ({
        name: uniqueFilter,
        count: filters.filter((filter) => uniqueFilter === filter).length,
    }));
};

const getSelectedFilters = (filters: Filter[]): SelectedFilter[] => {
    const searchParams = Astro.url.searchParams.getAll('organism');

    if (searchParams.length === 0) {
        return filters.map((filter) => ({ ...filter, selected: true }));
    }

    return filters.map((filter) => ({
        ...filter,
        selected: searchParams.includes(filter.name),
    }));
};

const filters = getFilters(subscriptions);
const selectedFilters = getSelectedFilters(filters);
---

<BaseLayout title='Subscriptions' omitHeaderNavigation={true}>
    <Subscriptions client:load filters={selectedFilters} subscriptions={subscriptions} />
</BaseLayout>
