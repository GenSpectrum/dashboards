---
import { views } from '@genspectrum/dashboard-components/util';

import ComponentsGrid from '../../components/ComponentsGrid.astro';
import GsAggregate from '../../components/genspectrum/GsAggregate.astro';
import GsMutations from '../../components/genspectrum/GsMutations.astro';
import GsMutationsOverTime from '../../components/genspectrum/GsMutationsOverTime.astro';
import GsPrevalenceOverTime from '../../components/genspectrum/GsPrevalenceOverTime.astro';
import GsRelativeGrowthAdvantage from '../../components/genspectrum/GsRelativeGrowthAdvantage.astro';
import GsStatistics from '../../components/genspectrum/GsStatistics.astro';
import { AnalyzeSingleVariantSelectorFallback } from '../../components/pageStateSelectors/FallbackElement';
import { SelectorHeadline } from '../../components/pageStateSelectors/SelectorHeadline';
import { SingleVariantPageStateSelector } from '../../components/pageStateSelectors/SingleVariantPageStateSelector';
import { CollectionsList } from '../../components/views/analyzeSingleVariant/CollectionsList';
import SelectVariant from '../../components/views/analyzeSingleVariant/SelectVariant.astro';
import { sanitizeForFilename } from '../../components/views/compareSideBySide/toDownloadLink';
import { getDashboardsConfig } from '../../config';
import SingleVariantOrganismPageLayout from '../../layouts/OrganismPage/SingleVariantOrganismPageLayout.astro';
import { chooseGranularityBasedOnDateRange } from '../../util/chooseGranularityBasedOnDateRange';
import { hasOnlyUndefinedValues } from '../../util/hasOnlyUndefinedValues';
import { getLineageFilterFields, getVariantFilterConfig } from '../../views/View';
import { getLocationSubdivision } from '../../views/locationHelpers';
import { toDisplayName } from '../../views/pageStateHandlers/PageStateHandler';
import { type OrganismViewKey } from '../../views/routing';
import { ServerSide } from '../../views/serverSideRouting';

const organismViewKey: OrganismViewKey = 'covid.singleVariantView';
const view = ServerSide.routing.getOrganismView(organismViewKey);
const pageState = view.pageStateHandler.parsePageStateFromUrl(Astro.url);

const variantFilter = view.pageStateHandler.toLapisFilter(pageState);
const datasetLapisFilter = view.pageStateHandler.toLapisFilterWithoutVariant(pageState);
const timeGranularity = chooseGranularityBasedOnDateRange({
    earliestDate: new Date(view.organismConstants.earliestDate),
    dateRange: pageState.datasetFilter.dateFilters[view.organismConstants.mainDateField],
});

const { label: subdivisionLabel, field: subdivisionField } = getLocationSubdivision(
    view.organismConstants.locationFields,
    pageState.datasetFilter.location,
);

const variantFilterConfig = getVariantFilterConfig(
    view.organismConstants.lineageFilters,
    pageState.variantFilter,
    view.organismConstants.useAdvancedQuery,
);

const noVariantSelected = hasOnlyUndefinedValues(pageState.variantFilter);

const displayName = toDisplayName(pageState.variantFilter);
const downloadLinks = noVariantSelected
    ? []
    : [
          {
              label: `Download accessions of ${displayName}`,
              filter: variantFilter,
              downloadFileBasename: `${view.organismConstants.organism}_${sanitizeForFilename(displayName)}_accessions`,
          },
      ];
const organismConfig = getDashboardsConfig().dashboards.organisms;
---

<SingleVariantOrganismPageLayout view={view} downloadLinks={downloadLinks}>
    <div slot='filters'>
        <SingleVariantPageStateSelector
            locationFilterConfig={{
                locationFields: view.organismConstants.locationFields,
                placeholderText: 'Sampling location',
            }}
            variantFilterConfig={variantFilterConfig}
            organismViewKey={organismViewKey}
            organismsConfig={organismConfig}
            baselineFilterConfigs={view.organismConstants.baselineFilterConfigs}
            datasetFilter={pageState.datasetFilter}
            client:only='react'
        >
            <AnalyzeSingleVariantSelectorFallback slot='fallback' />
        </SingleVariantPageStateSelector>
        <hr class='my-4 border-gray-200' />
        <div class='mt-4'>
            <SelectorHeadline> Collections </SelectorHeadline>
            <CollectionsList
                initialCollectionId={pageState.collectionId}
                organismsConfig={organismConfig}
                client:load
            />
        </div>
    </div>

    {
        noVariantSelected ? (
            <div class='mx-auto'>
                <SelectVariant slot='dataDisplay' />
            </div>
        ) : (
            <div class='mx-[8px] flex flex-col gap-y-6' slot='dataDisplay'>
                <GsStatistics numeratorFilter={variantFilter} denominatorFilter={datasetLapisFilter} />
                <ComponentsGrid>
                    <GsPrevalenceOverTime
                        numeratorFilters={[
                            {
                                displayName: '',
                                lapisFilter: variantFilter,
                            },
                        ]}
                        denominatorFilter={datasetLapisFilter}
                        lapisDateField={view.organismConstants.mainDateField}
                        granularity={timeGranularity}
                    />
                    <GsRelativeGrowthAdvantage
                        numeratorFilter={variantFilter}
                        denominatorFilter={datasetLapisFilter}
                        lapisDateField={view.organismConstants.mainDateField}
                    />
                    <GsMutations
                        lapisFilter={variantFilter}
                        baselineLapisFilter={datasetLapisFilter}
                        sequenceType='nucleotide'
                    />
                    <GsMutations
                        lapisFilter={variantFilter}
                        baselineLapisFilter={datasetLapisFilter}
                        sequenceType='amino acid'
                    />
                    <GsAggregate
                        title='Sub-lineages'
                        fields={getLineageFilterFields(view.organismConstants.lineageFilters)}
                        lapisFilter={variantFilter}
                        views={[views.table, views.bar]}
                    />
                    {subdivisionField !== undefined && (
                        <GsAggregate
                            title={subdivisionLabel}
                            fields={[subdivisionField]}
                            lapisFilter={variantFilter}
                            views={[views.table, views.bar]}
                        />
                    )}
                    <GsAggregate
                        title='Hosts'
                        fields={[view.organismConstants.hostField]}
                        lapisFilter={variantFilter}
                        views={[views.table, views.bar]}
                    />
                </ComponentsGrid>

                <GsMutationsOverTime
                    lapisFilter={variantFilter}
                    sequenceType='nucleotide'
                    granularity={timeGranularity}
                    lapisDateField={view.organismConstants.mainDateField}
                />

                <GsMutationsOverTime
                    lapisFilter={variantFilter}
                    sequenceType='amino acid'
                    granularity={timeGranularity}
                    lapisDateField={view.organismConstants.mainDateField}
                />
            </div>
        )
    }
</SingleVariantOrganismPageLayout>
