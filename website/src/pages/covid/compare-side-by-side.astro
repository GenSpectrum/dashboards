---
import GsAggregate from '../../components/genspectrum/GsAggregate.astro';
import GsMutations from '../../components/genspectrum/GsMutations.astro';
import GsPrevalenceOverTime from '../../components/genspectrum/GsPrevalenceOverTime.astro';
import GsRelativeGrowthAdvantage from '../../components/genspectrum/GsRelativeGrowthAdvantage.astro';
import { CompareSideBySidePageStateSelector } from '../../components/pageStateSelectors/CompareSideBySidePageStateSelector';
import { CompareSideBySideSelectorFallback } from '../../components/pageStateSelectors/FallbackElement';
import { toDownloadLink } from '../../components/views/compareSideBySide/toDownloadLink';
import { enableAdvancedQueryFilter, getDashboardsConfig, getLapisUrl } from '../../config';
import OrganismViewPageLayout from '../../layouts/OrganismPage/OrganismViewPageLayout.astro';
import { chooseGranularityBasedOnDateRange } from '../../util/chooseGranularityBasedOnDateRange';
import { ComponentHeight } from '../../views/OrganismConstants';
import { toLapisFilterWithoutVariant } from '../../views/pageStateHandlers/toLapisFilterWithoutVariant';
import type { OrganismViewKey } from '../../views/routing';
import { ServerSide } from '../../views/serverSideRouting';

const organismViewKey: OrganismViewKey = 'covid.compareSideBySideView';
const view = ServerSide.routing.getOrganismView(organismViewKey);

const pageState = view.pageStateHandler.parsePageStateFromUrl(Astro.url);

const downloadLinks = [...pageState.filters.entries()].map(
    toDownloadLink(view.pageStateHandler, view.organismConstants.organism),
);
---

<OrganismViewPageLayout view={view} downloadLinks={downloadLinks}>
    <gs-app lapis={getLapisUrl(view.organismConstants.organism)}>
        <div class='flex overflow-x-auto'>
            {
                Array.from(pageState.filters).map(([id, { variantFilter, datasetFilter }]) => {
                    const baselineLapisFilter = toLapisFilterWithoutVariant(
                        datasetFilter,
                        view.organismConstants.additionalFilters,
                    );
                    const timeGranularity = chooseGranularityBasedOnDateRange({
                        earliestDate: new Date(view.organismConstants.earliestDate),
                        dateRange: datasetFilter.dateFilters[view.organismConstants.mainDateField],
                    });
                    const numeratorFilter = {
                        ...variantFilter.lineages,
                        ...variantFilter.mutations,
                        variantQuery: variantFilter.variantQuery,
                        ...baselineLapisFilter,
                    };

                    return (
                        <div class='flex min-w-[500px] flex-1 flex-col gap-4 border-r-2 border-gray-200 px-2'>
                            <div class='mb-4'>
                                {pageState.filters.size > 1 && (
                                    <a
                                        class='block w-full px-2 py-1 text-sm font-light hover:bg-neutral-100'
                                        href={view.pageStateHandler.toUrl(
                                            view.pageStateHandler.removeFilter(pageState, id),
                                        )}
                                    >
                                        Remove column
                                    </a>
                                )}
                                <CompareSideBySidePageStateSelector
                                    filterId={id}
                                    initialPageState={pageState}
                                    organismsConfig={getDashboardsConfig().dashboards.organisms}
                                    organismViewKey={organismViewKey}
                                    enableAdvancedQueryFilter={enableAdvancedQueryFilter()}
                                    client:only='react'
                                >
                                    <CompareSideBySideSelectorFallback
                                        slot='fallback'
                                        numFilters={pageState.filters.size}
                                    />
                                </CompareSideBySidePageStateSelector>
                            </div>

                            <GsPrevalenceOverTime
                                numeratorFilters={[
                                    {
                                        displayName: '',
                                        lapisFilter: numeratorFilter,
                                    },
                                ]}
                                denominatorFilter={baselineLapisFilter}
                                lapisDateField={view.organismConstants.mainDateField}
                                granularity={timeGranularity}
                                height={ComponentHeight.large}
                                pageSize={10}
                            />
                            <GsRelativeGrowthAdvantage
                                numeratorFilter={numeratorFilter}
                                denominatorFilter={baselineLapisFilter}
                                lapisDateField={view.organismConstants.mainDateField}
                                height={ComponentHeight.large}
                            />
                            <GsMutations
                                lapisFilter={numeratorFilter}
                                baselineLapisFilter={baselineLapisFilter}
                                sequenceType='nucleotide'
                                pageSize={10}
                            />
                            <GsMutations
                                lapisFilter={numeratorFilter}
                                baselineLapisFilter={baselineLapisFilter}
                                sequenceType='amino acid'
                                pageSize={10}
                            />
                            {view.organismConstants.aggregatedVisualizations.compareSideBySide.map(
                                ({ label, fields, views }) => (
                                    <GsAggregate
                                        title={label}
                                        fields={fields}
                                        lapisFilter={numeratorFilter}
                                        views={views}
                                        pageSize={10}
                                    />
                                ),
                            )}
                        </div>
                    );
                })
            }
            <a
                class='py-4 pt-8 text-left text-sm font-light hover:bg-neutral-100'
                href={view.pageStateHandler.toUrl(view.pageStateHandler.addEmptyFilter(pageState))}
                style='writing-mode: vertical-rl;'
            >
                Add column
            </a>
        </div>
    </gs-app>
</OrganismViewPageLayout>
