---
import ComponentWrapper from '../../components/ComponentWrapper.astro';
import ComponentsGrid from '../../components/ComponentsGrid.astro';
import LocationTimeFilter from '../../components/LocationTimeFilter.astro';
import { getLapisUrl } from '../../config';
import OrganismPageLayout from '../../layouts/OrganismPage/OrganismPageLayout.astro';
import { Organisms } from '../../types/Organism';
import { defaultTablePageSize } from '../../views/View';
import { chooseGranularityBasedOnDateRange, getLocationSubdivision } from '../../views/helpers';
import { type OrganismViewKey } from '../../views/routing';
import { ServerSide } from '../../views/serverSideRouting';

const organismViewKey: OrganismViewKey = 'mpox.sequencingEffortsView';
const view = ServerSide.routing.getOrganismView(organismViewKey);
const pageState = view.parsePageStateFromUrl(Astro.url);

const baselineFilter = view.toLapisFilter(pageState);

const timeGranularity = chooseGranularityBasedOnDateRange(
    pageState.baselineFilter.dateRange,
    new Date(view.earliestDate),
);

const { label: subdivisionLabel, field: subdivisionField } = getLocationSubdivision(
    view.locationFields,
    pageState.baselineFilter.location,
);
---

<OrganismPageLayout view={view}>
    <gs-app lapis={getLapisUrl(Organisms.mpox)}>
        <div class='mb-4 flex items-center justify-center bg-slate-200 px-2 py-1'>
            <div class='mr-2 font-semibold'>Filter dataset:</div>
            <div class='max-w-[1000px]'>
                <LocationTimeFilter
                    fields={view.locationFields}
                    initialLocation={pageState.baselineFilter.location}
                    initialDateRange={pageState.baselineFilter.dateRange}
                    earliestDate={view.earliestDate}
                    customDateRangeOptions={view.customDateRangeOptions}
                    organismViewKey={organismViewKey}
                />
            </div>
        </div>

        <ComponentsGrid>
            <ComponentWrapper title='Number sequences' height='600px'>
                <gs-number-sequences-over-time
                    lapisFilter={JSON.stringify({
                        displayName: '',
                        lapisFilter: baselineFilter,
                    })}
                    lapisDateField={view.mainDateField}
                    views='["bar", "line", "table"]'
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'
                    granularity={timeGranularity}></gs-number-sequences-over-time>
            </ComponentWrapper>
            {
                subdivisionField !== undefined && (
                    <ComponentWrapper title={subdivisionLabel} height='600px'>
                        <gs-aggregate
                            fields={JSON.stringify([subdivisionField])}
                            filter={JSON.stringify(baselineFilter)}
                            pageSize={defaultTablePageSize}
                            width='100%'
                            height='100%'
                        />
                    </ComponentWrapper>
                )
            }
            <ComponentWrapper title='Hosts' height='600px'>
                <gs-aggregate
                    fields={JSON.stringify([view.hostField])}
                    filter={JSON.stringify(baselineFilter)}
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'></gs-aggregate>
            </ComponentWrapper>
            <ComponentWrapper title='Author affiliations' height='600px'>
                <gs-aggregate
                    fields={JSON.stringify([view.authorAffiliationsField])}
                    filter={JSON.stringify(baselineFilter)}
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'></gs-aggregate>
            </ComponentWrapper>
            <ComponentWrapper title='Authors' height='600px'>
                <gs-aggregate
                    fields={JSON.stringify([view.authorsField, view.authorAffiliationsField])}
                    filter={JSON.stringify(baselineFilter)}
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'></gs-aggregate>
            </ComponentWrapper>
        </ComponentsGrid>
    </gs-app>
</OrganismPageLayout>
