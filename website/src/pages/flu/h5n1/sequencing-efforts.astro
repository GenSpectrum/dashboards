---
import ComponentWrapper from '../../../components/ComponentWrapper.astro';
import ComponentsGrid from '../../../components/ComponentsGrid.astro';
import { SequencingEffortsPageStateSelector } from '../../../components/pageStateSelectors/SequencingEffortsPageStateSelector';
import { getDashboardsConfig } from '../../../config';
import SingleVariantOrganismPageLayout from '../../../layouts/OrganismPage/SingleVariantOrganismPageLayout.astro';
import { chooseGranularityBasedOnDateRange } from '../../../util/chooseGranularityBasedOnDateRange';
import { defaultTablePageSize } from '../../../views/View';
import { getLocationSubdivision } from '../../../views/helpers';
import type { OrganismViewKey } from '../../../views/routing';
import { ServerSide } from '../../../views/serverSideRouting';

const organismViewKey: OrganismViewKey = 'h5n1.sequencingEffortsView';
const view = ServerSide.routing.getOrganismView(organismViewKey);
const pageState = view.pageStateHandler.parsePageStateFromUrl(Astro.url);

const baselineFilter = view.pageStateHandler.toLapisFilter(pageState);

const timeGranularity = chooseGranularityBasedOnDateRange(
    pageState.baselineFilter.dateRange,
    new Date(view.organismConstants.earliestDate),
);
const { label: subdivisionLabel, field: subdivisionField } = getLocationSubdivision(
    view.organismConstants.locationFields,
    pageState.baselineFilter.location,
);
---

<SingleVariantOrganismPageLayout view={view}>
    <SequencingEffortsPageStateSelector
        slot='filters'
        locationFilterConfig={{
            locationFields: view.organismConstants.locationFields,
            initialLocation: pageState.baselineFilter.location,
            placeholderText: 'Sampling location',
        }}
        dateRangeFilterConfig={{
            initialDateRange: pageState.baselineFilter.dateRange,
            dateRangeOptions: view.organismConstants.dateRangeOptions,
            earliestDate: view.organismConstants.earliestDate,
            dateColumn: view.organismConstants.mainDateField,
        }}
        pageState={pageState}
        organismViewKey={organismViewKey}
        organismsConfig={getDashboardsConfig().dashboards.organisms}
        client:only='react'
    />

    <ComponentsGrid slot='dataDisplay'>
        <ComponentWrapper title='Number sequences' height='600px'>
            <gs-number-sequences-over-time
                lapisFilter={JSON.stringify({
                    displayName: '',
                    lapisFilter: baselineFilter,
                })}
                lapisDateField={view.organismConstants.mainDateField}
                views='["bar", "line", "table"]'
                pageSize={defaultTablePageSize}
                width='100%'
                height='100%'
                granularity={timeGranularity}></gs-number-sequences-over-time>
        </ComponentWrapper>
        {
            subdivisionField !== undefined && (
                <ComponentWrapper title={subdivisionLabel} height='600px'>
                    <gs-aggregate
                        fields={JSON.stringify([subdivisionField])}
                        filter={JSON.stringify(baselineFilter)}
                        pageSize={defaultTablePageSize}
                        width='100%'
                        height='100%'
                    />
                </ComponentWrapper>
            )
        }
        <ComponentWrapper title='Hosts' height='600px'>
            <gs-aggregate
                fields={JSON.stringify([view.organismConstants.hostField])}
                filter={JSON.stringify(baselineFilter)}
                pageSize={defaultTablePageSize}
                width='100%'
                height='100%'></gs-aggregate>
        </ComponentWrapper>
        <ComponentWrapper title='Author affiliations' height='600px'>
            <gs-aggregate
                fields={JSON.stringify([view.organismConstants.authorAffiliationsField])}
                filter={JSON.stringify(baselineFilter)}
                pageSize={defaultTablePageSize}
                width='100%'
                height='100%'></gs-aggregate>
        </ComponentWrapper>
        <ComponentWrapper title='Authors' height='600px'>
            <gs-aggregate
                fields={JSON.stringify([
                    view.organismConstants.authorsField,
                    view.organismConstants.authorAffiliationsField,
                ])}
                filter={JSON.stringify(baselineFilter)}
                pageSize={defaultTablePageSize}
                width='100%'
                height='100%'></gs-aggregate>
        </ComponentWrapper>
    </ComponentsGrid>
</SingleVariantOrganismPageLayout>
