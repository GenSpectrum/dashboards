---
import ComponentsGrid from '../../../components/ComponentsGrid.astro';
import LocationTimeFilter from '../../../components/LocationTimeFilter.astro';
import { getLapisUrl } from '../../../config';
import BaseLayout from '../../../layouts/base/BaseLayout.astro';
import { defaultTablePageSize } from '../../../routes/View';
import { chooseGranularityBasedOnDateRange, getLocationSubdivision } from '../../../routes/helpers';
import type { OrganismViewKey } from '../../../routes/routing';
import { ServerSide } from '../../../routes/serverSideRouting';
import { Organisms } from '../../../types/Organism';

const organismViewKey: OrganismViewKey = 'h5n1.sequencingEffortsView';
const view = ServerSide.routing.getOrganismView(organismViewKey);
const pageState = view.parsePageStateFromUrl(Astro.url);

const baselineFilter = view.toLapisFilter(pageState);

const timeGranularity = chooseGranularityBasedOnDateRange(
    pageState.baselineFilter.dateRange,
    new Date(view.earliestDate),
);
const { label: subdivisionLabel, field: subdivisionField } = getLocationSubdivision(
    view.locationFields,
    pageState.baselineFilter.location,
);
---

<BaseLayout title='Sequencing Efforts | H5N1 | GenSpectrum'>
    <gs-app lapis={getLapisUrl(Organisms.h5n1)}>
        <div class='mb-4 flex items-center justify-center bg-blue-50 px-2 py-1'>
            <div class='mr-2 font-semibold'>Filter dataset:</div>
            <div class='max-w-[1000px]'>
                <LocationTimeFilter
                    fields={view.locationFields}
                    initialLocation={pageState.baselineFilter.location}
                    initialDateRange={pageState.baselineFilter.dateRange}
                    earliestDate={view.earliestDate}
                    customDateRangeOptions={view.customDateRangeOptions}
                    organismViewKey={organismViewKey}
                />
            </div>
        </div>

        <ComponentsGrid>
            <ComponentsGrid title='Number sequences' height='600px'>
                <gs-number-sequences-over-time
                    lapisFilter={JSON.stringify({
                        displayName: '',
                        lapisFilter: baselineFilter,
                    })}
                    lapisDateField={view.mainDateField}
                    views='["bar", "line", "table"]'
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'
                    granularity={timeGranularity}></gs-number-sequences-over-time>
            </ComponentsGrid>
            {
                subdivisionField !== undefined && (
                    <ComponentsGrid title={subdivisionLabel} height='600px'>
                        <gs-aggregate
                            fields={JSON.stringify([subdivisionField])}
                            filter={JSON.stringify(baselineFilter)}
                            pageSize={defaultTablePageSize}
                            width='100%'
                            height='100%'
                        />
                    </ComponentsGrid>
                )
            }
            <ComponentsGrid title='Hosts' height='600px'>
                <gs-aggregate
                    fields={JSON.stringify([view.hostField])}
                    filter={JSON.stringify(baselineFilter)}
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'></gs-aggregate>
            </ComponentsGrid>
            <ComponentsGrid title='Author affiliations' height='600px'>
                <gs-aggregate
                    fields={JSON.stringify([view.authorAffiliationsField])}
                    filter={JSON.stringify(baselineFilter)}
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'></gs-aggregate>
            </ComponentsGrid>
            <ComponentsGrid title='Authors' height='600px'>
                <gs-aggregate
                    fields={JSON.stringify([view.authorsField, view.authorAffiliationsField])}
                    filter={JSON.stringify(baselineFilter)}
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'></gs-aggregate>
            </ComponentsGrid>
        </ComponentsGrid>
    </gs-app>
</BaseLayout>
