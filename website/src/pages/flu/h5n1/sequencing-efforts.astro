---
import { chooseGranularityBasedOnDateRange } from '../../../routes/helpers';
import BaseLayout from '../../../layouts/base/BaseLayout.astro';
import LocationTimeFilter from '../../../components/LocationTimeFilter.astro';
import { getLapisUrl } from '../../../config';
import { defaultTablePageSize, Organisms } from '../../../routes/View';
import ComponentsGrid from '../../../components/ComponentsGrid.astro';
import { ServerSide } from '../../../routes/serverSideRouting';

const routeData = ServerSide.h5n1View3.parseUrl(Astro.url);

const baselineFilter = ServerSide.h5n1View3.toLapisFilter(routeData);

const timeGranularity = chooseGranularityBasedOnDateRange({
    from: baselineFilter[`${ServerSide.h5n1View3.mainDateField}From`] as string,
    to: baselineFilter[`${ServerSide.h5n1View3.mainDateField}To`] as string,
});
let subDivisionField = undefined;
let subDivisionLabel = '';
if (routeData.baselineFilter.location.geo_loc_country === undefined) {
    subDivisionField = 'geo_loc_country';
    subDivisionLabel = 'Countries';
} else if (routeData.baselineFilter.location.geo_loc_admin_1 === undefined) {
    subDivisionField = 'geo_loc_admin_1';
    subDivisionLabel = 'Geographic sub-divisions';
}
---

<BaseLayout title='Sequencing Efforts | H5N1 | GenSpectrum'>
    <gs-app lapis={getLapisUrl(Organisms.h5n1)}>
        <div class='mb-4 flex items-center justify-center bg-blue-50 px-2 py-1'>
            <div class='mr-2 font-semibold'>Filter dataset:</div>
            <div class='max-w-[1000px]'>
                <LocationTimeFilter
                    fields={ServerSide.h5n1View3.locationFields}
                    initialLocation={baselineFilter}
                    initialDateRange={routeData.baselineFilter.dateRange}
                    earliestDate={ServerSide.h5n1View3.earliestDate}
                    customDateRangeOptions={ServerSide.h5n1View3.customDateRangeOptions}
                />
            </div>
        </div>

        <ComponentsGrid>
            <ComponentsGrid title='Number sequences' height='600px'>
                <gs-number-sequences-over-time
                    lapisFilter={JSON.stringify({
                        displayName: '',
                        lapisFilter: baselineFilter,
                    })}
                    lapisDateField={ServerSide.h5n1View3.mainDateField}
                    views='["bar", "line", "table"]'
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'
                    granularity={timeGranularity}></gs-number-sequences-over-time>
            </ComponentsGrid>
            {
                subDivisionField && (
                    <ComponentsGrid title={subDivisionLabel} height='600px'>
                        <gs-aggregate
                            fields={JSON.stringify([subDivisionField])}
                            filter={JSON.stringify(baselineFilter)}
                            pageSize={defaultTablePageSize}
                            width='100%'
                            height='100%'
                        />
                    </ComponentsGrid>
                )
            }
            <ComponentsGrid title='Hosts' height='600px'>
                <gs-aggregate
                    fields='["host_name_scientific"]'
                    filter={JSON.stringify(baselineFilter)}
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'></gs-aggregate>
            </ComponentsGrid>
            <ComponentsGrid title='Author affiliations' height='600px'>
                <gs-aggregate
                    fields='["author_affiliations"]'
                    filter={JSON.stringify(baselineFilter)}
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'></gs-aggregate>
            </ComponentsGrid>
            <ComponentsGrid title='Authors' height='600px'>
                <gs-aggregate
                    fields='["authors", "author_affiliations"]'
                    filter={JSON.stringify(baselineFilter)}
                    pageSize={defaultTablePageSize}
                    width='100%'
                    height='100%'></gs-aggregate>
            </ComponentsGrid>
        </ComponentsGrid>
    </gs-app>
</BaseLayout>
