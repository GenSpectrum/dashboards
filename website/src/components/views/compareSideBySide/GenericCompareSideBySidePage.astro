---
import { toDownloadLink } from './toDownloadLink';
import { getDashboardsConfig, getLapisUrl } from '../../../config';
import OrganismViewPageLayout from '../../../layouts/OrganismPage/OrganismViewPageLayout.astro';
import { chooseGranularityBasedOnDateRange } from '../../../util/chooseGranularityBasedOnDateRange';
import { getLineageFilterFields, getVariantFilterConfig } from '../../../views/View';
import { toLapisFilterWithoutVariant } from '../../../views/pageStateHandlers/PageStateHandler';
import { type OrganismViewKey, type OrganismWithViewKey } from '../../../views/routing';
import { ServerSide } from '../../../views/serverSideRouting';
import { compareSideBySideViewKey } from '../../../views/viewKeys';
import GsAggregate from '../../genspectrum/GsAggregate.astro';
import GsMutations from '../../genspectrum/GsMutations.astro';
import GsPrevalenceOverTime from '../../genspectrum/GsPrevalenceOverTime.astro';
import { CompareSideBySidePageStateSelector } from '../../pageStateSelectors/CompareSideBySidePageStateSelector';
import { CompareSideBySideSelectorFallback } from '../../pageStateSelectors/FallbackElement';

type OrganismViewCompareVariant = OrganismWithViewKey<typeof compareSideBySideViewKey>;
interface Props {
    organism: OrganismViewCompareVariant;
    hideMutationComponents?: boolean;
}

const { organism, hideMutationComponents } = Astro.props;
const organismViewKey = `${organism}.${compareSideBySideViewKey}` satisfies OrganismViewKey;
const view = ServerSide.routing.getOrganismView(organismViewKey);

const pageState = view.pageStateHandler.parsePageStateFromUrl(Astro.url);

const downloadLinks = [...pageState.filters.entries()].map(toDownloadLink(view.pageStateHandler, organism));
---

<OrganismViewPageLayout view={view} downloadLinks={downloadLinks}>
    <gs-app lapis={getLapisUrl(view.organismConstants.organism)}>
        <div class='flex overflow-x-auto'>
            {
                Array.from(pageState.filters).map(([id, { variantFilter, datasetFilter }]) => {
                    const datasetLapisFilter = toLapisFilterWithoutVariant({ datasetFilter }, view.organismConstants);
                    const timeGranularity = chooseGranularityBasedOnDateRange(
                        datasetFilter.dateRange,
                        new Date(view.organismConstants.earliestDate),
                    );
                    const numeratorFilter = view.pageStateHandler.variantFilterToLapisFilter(
                        datasetFilter,
                        variantFilter,
                    );
                    const variantFilterConfig = getVariantFilterConfig(
                        view.organismConstants.lineageFilters,
                        variantFilter,
                        view.organismConstants.useAdvancedQuery,
                        hideMutationComponents,
                    );

                    return (
                        <div class='flex min-w-[500px] flex-1 flex-col gap-4 border-r-2 px-2'>
                            <div class='mb-4'>
                                {pageState.filters.size > 1 && (
                                    <a
                                        class='block w-full px-2 py-1 text-sm font-light hover:bg-neutral-100'
                                        href={view.pageStateHandler.toUrl(
                                            view.pageStateHandler.removeFilter(pageState, id),
                                        )}
                                    >
                                        Remove column
                                    </a>
                                )}
                                <CompareSideBySidePageStateSelector
                                    locationFilterConfig={{
                                        locationFields: view.organismConstants.locationFields,
                                        initialLocation: datasetFilter.location,
                                        placeholderText: 'Sampling location',
                                    }}
                                    dateRangeFilterConfig={{
                                        initialDateRange: datasetFilter.dateRange,
                                        dateRangeOptions: view.organismConstants.dateRangeOptions,
                                        earliestDate: view.organismConstants.earliestDate,
                                        dateColumn: view.organismConstants.mainDateField,
                                    }}
                                    variantFilterConfig={variantFilterConfig}
                                    filterId={id}
                                    pageState={pageState}
                                    organismsConfig={getDashboardsConfig().dashboards.organisms}
                                    organismViewKey={organismViewKey}
                                    client:only='react'
                                >
                                    <CompareSideBySideSelectorFallback
                                        slot='fallback'
                                        numFilters={pageState.filters.size}
                                    />
                                </CompareSideBySidePageStateSelector>
                            </div>

                            <GsPrevalenceOverTime
                                numeratorFilters={[
                                    {
                                        displayName: '',
                                        lapisFilter: numeratorFilter,
                                    },
                                ]}
                                denominatorFilter={datasetLapisFilter}
                                lapisDateField={view.organismConstants.mainDateField}
                                granularity={timeGranularity}
                            />
                            {!hideMutationComponents && (
                                <>
                                    <GsMutations
                                        lapisFilter={numeratorFilter}
                                        baselineLapisFilter={datasetLapisFilter}
                                        sequenceType='nucleotide'
                                    />
                                    <GsMutations
                                        lapisFilter={numeratorFilter}
                                        baselineLapisFilter={datasetLapisFilter}
                                        sequenceType='amino acid'
                                    />
                                </>
                            )}

                            <GsAggregate
                                title='Sub-lineages'
                                fields={getLineageFilterFields(view.organismConstants.lineageFilters)}
                                lapisFilter={numeratorFilter}
                            />
                            <GsAggregate
                                title='Hosts'
                                fields={[view.organismConstants.hostField]}
                                lapisFilter={numeratorFilter}
                            />
                        </div>
                    );
                })
            }
            <a
                class='px-4 pt-8 text-left text-sm font-light hover:bg-neutral-100'
                href={view.pageStateHandler.toUrl(view.pageStateHandler.addEmptyFilter(pageState))}
                style='writing-mode: vertical-rl;'
            >
                Add column
            </a>
        </div>
    </gs-app>
</OrganismViewPageLayout>
