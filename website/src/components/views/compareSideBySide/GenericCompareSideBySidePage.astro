---
import { getDashboardsConfig, getLapisUrl } from '../../../config';
import OrganismPageLayout from '../../../layouts/OrganismPage/OrganismPageLayout.astro';
import { type Organism } from '../../../types/Organism';
import { chooseGranularityBasedOnDateRange } from '../../../util/chooseGranularityBasedOnDateRange';
import { defaultTablePageSize, getLineageFilterConfigs, getLineageFilterFields } from '../../../views/View';
import { type OrganismViewKey } from '../../../views/routing';
import { ServerSide } from '../../../views/serverSideRouting';
import { type compareSideBySideViewKey } from '../../../views/viewKeys';
import ComponentWrapper from '../../ComponentWrapper.astro';
import { CompareSideBySidePageStateSelector } from '../../pageStateSelectors/CompareSideBySidePageStateSelector';

interface Props {
    organismViewKey: Extract<OrganismViewKey, `${Organism}.${typeof compareSideBySideViewKey}`>;
}

const { organismViewKey } = Astro.props;
const view = ServerSide.routing.getOrganismView(organismViewKey);

const pageState = view.pageStateHandler.parsePageStateFromUrl(Astro.url);
---

<OrganismPageLayout view={view}>
    <gs-app lapis={getLapisUrl(view.organismConstants.organism)}>
        <div class='flex overflow-x-auto'>
            {
                Array.from(pageState.filters).map(([id, { variantFilter, datasetFilter }]) => {
                    const datasetLapisFilter = view.pageStateHandler.datasetFilterToLapisFilter(datasetFilter);
                    const timeGranularity = chooseGranularityBasedOnDateRange(
                        datasetFilter.dateRange,
                        new Date(view.organismConstants.earliestDate),
                    );
                    const numeratorFilter = {
                        ...variantFilter.lineages,
                        ...variantFilter.mutations,
                        ...datasetLapisFilter,
                    };
                    const lineageFilterConfigs = getLineageFilterConfigs(
                        view.organismConstants.lineageFilters,
                        variantFilter.lineages,
                    );

                    return (
                        <div class='flex min-w-[500px] flex-1 flex-col gap-4 border-r-2 px-2'>
                            <div class='mb-4'>
                                {pageState.filters.size > 1 && (
                                    <a
                                        class='block w-full px-2 py-1 text-sm font-light hover:bg-neutral-100'
                                        href={view.pageStateHandler.toUrl(
                                            view.pageStateHandler.removeFilter(pageState, id),
                                        )}
                                    >
                                        Remove column
                                    </a>
                                )}
                                <CompareSideBySidePageStateSelector
                                    locationFilterConfig={{
                                        locationFields: view.organismConstants.locationFields,
                                        initialLocation: datasetFilter.location,
                                        placeholderText: 'Sampling location',
                                    }}
                                    dateRangeFilterConfig={{
                                        initialDateRange: datasetFilter.dateRange,
                                        dateRangeOptions: view.organismConstants.dateRangeOptions,
                                        earliestDate: view.organismConstants.earliestDate,
                                        dateColumn: view.organismConstants.mainDateField,
                                    }}
                                    variantFilterConfig={{
                                        mutationFilterConfig: variantFilter.mutations,
                                        lineageFilterConfigs,
                                    }}
                                    filterId={id}
                                    pageState={pageState}
                                    organismsConfig={getDashboardsConfig().dashboards.organisms}
                                    organismViewKey={organismViewKey}
                                    client:only='react'
                                />
                            </div>

                            <ComponentWrapper title='Prevalence over time'>
                                <gs-prevalence-over-time
                                    numeratorFilter={JSON.stringify({
                                        displayName: '',
                                        lapisFilter: numeratorFilter,
                                    })}
                                    denominatorFilter={JSON.stringify(datasetLapisFilter)}
                                    lapisDateField={view.organismConstants.mainDateField}
                                    granularity={timeGranularity}
                                    smoothingWindow='0'
                                    pageSize={defaultTablePageSize}
                                    width='100%'
                                    height='100%'
                                />
                            </ComponentWrapper>
                            <ComponentWrapper title='Nucleotide mutations'>
                                <gs-mutations
                                    lapisFilter={JSON.stringify(numeratorFilter)}
                                    sequenceType='nucleotide'
                                    views='["grid", "table", "insertions"]'
                                    pageSize={defaultTablePageSize}
                                    width='100%'
                                    height='100%'
                                />
                            </ComponentWrapper>
                            <ComponentWrapper title='Amino acid mutations'>
                                <gs-mutations
                                    lapisFilter={JSON.stringify(numeratorFilter)}
                                    sequenceType='amino acid'
                                    views='["grid", "table", "insertions"]'
                                    pageSize={defaultTablePageSize}
                                    width='100%'
                                    height='100%'
                                />
                            </ComponentWrapper>
                            <ComponentWrapper title='Sub-lineages'>
                                <gs-aggregate
                                    fields={JSON.stringify(
                                        getLineageFilterFields(view.organismConstants.lineageFilters),
                                    )}
                                    filter={JSON.stringify(numeratorFilter)}
                                    pageSize={defaultTablePageSize}
                                    width='100%'
                                    height='100%'
                                />
                            </ComponentWrapper>
                            <ComponentWrapper title='Hosts'>
                                <gs-aggregate
                                    fields={JSON.stringify([view.organismConstants.hostField])}
                                    filter={JSON.stringify(numeratorFilter)}
                                    pageSize={defaultTablePageSize}
                                    width='100%'
                                    height='100%'
                                />
                            </ComponentWrapper>
                        </div>
                    );
                })
            }
            <a
                class='px-4 pt-8 text-left text-sm font-light hover:bg-neutral-100'
                href={view.pageStateHandler.toUrl(view.pageStateHandler.addEmptyFilter(pageState))}
                style='writing-mode: vertical-rl;'
            >
                Add column
            </a>
        </div>
    </gs-app>
</OrganismPageLayout>
