---
import { views } from '@genspectrum/dashboard-components/util';

import CountStatistics from './CountStatistics.astro';
import { getDashboardsConfig, getLapisUrl } from '../../../config';
import SingleVariantOrganismPageLayout from '../../../layouts/OrganismPage/SingleVariantOrganismPageLayout.astro';
import { chooseGranularityBasedOnDateRange } from '../../../util/chooseGranularityBasedOnDateRange';
import { getLineageFilterFields, getVariantFilterConfig } from '../../../views/View';
import { getLocationDisplayConfig } from '../../../views/locationHelpers';
import { type OrganismViewKey, type OrganismWithViewKey } from '../../../views/routing';
import { ServerSide } from '../../../views/serverSideRouting';
import { sequencingEffortsViewKey } from '../../../views/viewKeys';
import ComponentsGrid from '../../ComponentsGrid.astro';
import GsAggregate from '../../genspectrum/GsAggregate.astro';
import GsNumberSequencesOverTime from '../../genspectrum/GsNumberSequencesOverTime.astro';
import GsSequencesByLocation from '../../genspectrum/GsSequencesByLocation.astro';
import { SequencingEffortsSelectorFallback } from '../../pageStateSelectors/FallbackElement';
import { SequencingEffortsPageStateSelector } from '../../pageStateSelectors/SequencingEffortsPageStateSelector';

type OrganismViewCompareVariant = OrganismWithViewKey<typeof sequencingEffortsViewKey>;
interface Props {
    organism: OrganismViewCompareVariant;
}

const { organism } = Astro.props;
const organismViewKey: OrganismViewKey = `${organism}.${sequencingEffortsViewKey}` satisfies OrganismViewKey;
const view = ServerSide.routing.getOrganismView(organismViewKey);

const pageState = view.pageStateHandler.parsePageStateFromUrl(Astro.url);

const lapisFilter = view.pageStateHandler.toLapisFilter(pageState);
const timeGranularity = chooseGranularityBasedOnDateRange({
    earliestDate: new Date(view.organismConstants.earliestDate),
    dateRange: pageState.datasetFilter.dateFilters[view.organismConstants.mainDateField],
});
const { locationField, mapName } = getLocationDisplayConfig(
    view.organismConstants.locationFields,
    pageState.datasetFilter.location,
);
const variantFilterConfig = getVariantFilterConfig(
    view.organismConstants.lineageFilters,
    pageState.variantFilter,
    view.organismConstants.useAdvancedQuery,
);

const lineageFilterFields = getLineageFilterFields(view.organismConstants.lineageFilters);
---

<SingleVariantOrganismPageLayout
    view={view}
    downloadLinks={[
        {
            label: 'Download accessions',
            filter: lapisFilter,
            downloadFileBasename: `${organism}_sequencing_efforts_accessions`,
        },
    ]}
>
    <SequencingEffortsPageStateSelector
        slot='filters'
        locationFilterConfig={{
            locationFields: view.organismConstants.locationFields,
            placeholderText: 'Sampling location',
            label: 'Sampling location',
        }}
        organismViewKey={organismViewKey}
        organismsConfig={getDashboardsConfig().dashboards.organisms}
        variantFilterConfig={variantFilterConfig}
        baselineFilterConfigs={view.organismConstants.baselineFilterConfigs}
        datasetFilter={pageState.datasetFilter}
        client:only='react'
    >
        <SequencingEffortsSelectorFallback slot='fallback' />
    </SequencingEffortsPageStateSelector>

    <div class='mx-2 flex flex-col gap-y-6' slot='dataDisplay'>
        <CountStatistics lapisFilter={lapisFilter} lapisUrl={getLapisUrl(view.organismConstants.organism)} />
        <ComponentsGrid>
            <GsNumberSequencesOverTime
                lapisFilters={[
                    {
                        displayName: 'count',
                        lapisFilter: lapisFilter,
                    },
                ]}
                lapisDateField={view.organismConstants.mainDateField}
                granularity={timeGranularity}
                pageSize={10}
            />
            {
                locationField !== undefined && (
                    <GsSequencesByLocation
                        title='Sequences by location'
                        lapisLocationField={locationField}
                        lapisFilter={lapisFilter}
                        mapName={mapName}
                        pageSize={10}
                    />
                )
            }
            <GsAggregate
                title='Hosts'
                fields={[view.organismConstants.hostField]}
                lapisFilter={lapisFilter}
                views={[views.table, views.bar]}
                pageSize={10}
            />
            {
                lineageFilterFields.length > 0 && (
                    <GsAggregate
                        title='Sub-lineages'
                        fields={lineageFilterFields}
                        lapisFilter={lapisFilter}
                        views={[views.table, views.bar]}
                        pageSize={10}
                    />
                )
            }
            {
                view.organismConstants.additionalSequencingEffortsFields.map(({ label, fields, views }) => (
                    <GsAggregate title={label} fields={fields} lapisFilter={lapisFilter} views={views} pageSize={10} />
                ))
            }
        </ComponentsGrid>
    </div>
</SingleVariantOrganismPageLayout>
