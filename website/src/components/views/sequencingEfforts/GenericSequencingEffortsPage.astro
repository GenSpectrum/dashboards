---
import { getDashboardsConfig } from '../../../config';
import SingleVariantOrganismPageLayout from '../../../layouts/OrganismPage/SingleVariantOrganismPageLayout.astro';
import { type Organism } from '../../../types/Organism';
import { chooseGranularityBasedOnDateRange } from '../../../util/chooseGranularityBasedOnDateRange';
import { ComponentHeight } from '../../../views/OrganismConstants';
import { getLocationSubdivision } from '../../../views/helpers';
import { type OrganismViewKey } from '../../../views/routing';
import { ServerSide } from '../../../views/serverSideRouting';
import { sequencingEffortsViewKey } from '../../../views/viewKeys';
import ComponentsGrid from '../../ComponentsGrid.astro';
import GsAggregate from '../../genspectrum/GsAggregate.astro';
import GsNumberSequencesOverTime from '../../genspectrum/GsNumberSequencesOverTime.astro';
import { SequencingEffortsSelectorFallback } from '../../pageStateSelectors/FallbackElement';
import { SequencingEffortsPageStateSelector } from '../../pageStateSelectors/SequencingEffortsPageStateSelector';

interface Props {
    organism: Organism;
}

const { organism } = Astro.props;
const organismViewKey: OrganismViewKey = `${organism}.${sequencingEffortsViewKey}` satisfies OrganismViewKey;
const view = ServerSide.routing.getOrganismView(organismViewKey);
const pageState = view.pageStateHandler.parsePageStateFromUrl(Astro.url);

const datasetLapisFilter = view.pageStateHandler.toLapisFilter(pageState);

const timeGranularity = chooseGranularityBasedOnDateRange(
    pageState.datasetFilter.dateRange,
    new Date(view.organismConstants.earliestDate),
);
const { label: subdivisionLabel, field: subdivisionField } = getLocationSubdivision(
    view.organismConstants.locationFields,
    pageState.datasetFilter.location,
);
---

<SingleVariantOrganismPageLayout view={view}>
    <SequencingEffortsPageStateSelector
        slot='filters'
        locationFilterConfig={{
            locationFields: view.organismConstants.locationFields,
            initialLocation: pageState.datasetFilter.location,
            placeholderText: 'Sampling location',
        }}
        dateRangeFilterConfig={{
            initialDateRange: pageState.datasetFilter.dateRange,
            dateRangeOptions: view.organismConstants.dateRangeOptions,
            earliestDate: view.organismConstants.earliestDate,
            dateColumn: view.organismConstants.mainDateField,
        }}
        organismViewKey={organismViewKey}
        organismsConfig={getDashboardsConfig().dashboards.organisms}
        client:only='react'
    >
        <SequencingEffortsSelectorFallback slot='fallback' />
    </SequencingEffortsPageStateSelector>

    <ComponentsGrid slot='dataDisplay'>
        <GsNumberSequencesOverTime
            lapisFilters={[
                {
                    displayName: '',
                    lapisFilter: datasetLapisFilter,
                },
            ]}
            lapisDateField={view.organismConstants.mainDateField}
            granularity={timeGranularity}
        />
        {
            subdivisionField !== undefined && (
                <GsAggregate
                    title={subdivisionLabel}
                    height={ComponentHeight.large}
                    fields={[subdivisionField]}
                    lapisFilter={datasetLapisFilter}
                />
            )
        }
        <GsAggregate
            title='Hosts'
            height={ComponentHeight.large}
            fields={[view.organismConstants.hostField]}
            lapisFilter={datasetLapisFilter}
        />
        {
            view.organismConstants.additionalSequencingEffortsFields.map(({ label, fields, height }) => (
                <GsAggregate title={label} height={height} fields={fields} lapisFilter={datasetLapisFilter} />
            ))
        }
    </ComponentsGrid>
</SingleVariantOrganismPageLayout>
