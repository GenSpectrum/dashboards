---
import { views } from '@genspectrum/dashboard-components/util';

import QuickstartLinks from './QuickstartLinks.astro';
import SelectVariant from './SelectVariant.astro';
import { getDashboardsConfig } from '../../../config';
import SingleVariantOrganismPageLayout from '../../../layouts/OrganismPage/SingleVariantOrganismPageLayout.astro';
import { Organisms } from '../../../types/Organism';
import { chooseGranularityBasedOnDateRange } from '../../../util/chooseGranularityBasedOnDateRange';
import { hasOnlyUndefinedValues } from '../../../util/hasOnlyUndefinedValues';
import { getLineageFilterFields } from '../../../views/View';
import { getLocationSubdivision } from '../../../views/locationHelpers';
import { toDisplayName } from '../../../views/pageStateHandlers/PageStateHandler';
import { type OrganismViewKey, type OrganismWithViewKey } from '../../../views/routing';
import { ServerSide } from '../../../views/serverSideRouting';
import { singleVariantViewKey } from '../../../views/viewKeys';
import ComponentsGrid from '../../ComponentsGrid.astro';
import GsAggregate from '../../genspectrum/GsAggregate.astro';
import GsMutations from '../../genspectrum/GsMutations.astro';
import GsMutationsOverTime from '../../genspectrum/GsMutationsOverTime.astro';
import GsPrevalenceOverTime from '../../genspectrum/GsPrevalenceOverTime.astro';
import GsStatistics from '../../genspectrum/GsStatistics.astro';
import { AnalyzeSingleVariantSelectorFallback } from '../../pageStateSelectors/FallbackElement';
import { SingleVariantPageStateSelector } from '../../pageStateSelectors/SingleVariantPageStateSelector';
import { sanitizeForFilename } from '../compareSideBySide/toDownloadLink';

type OrganismViewCompareVariant = OrganismWithViewKey<typeof singleVariantViewKey>;
interface Props {
    organism: Exclude<OrganismViewCompareVariant, typeof Organisms.covid>;
}

const { organism } = Astro.props;
const organismViewKey = `${organism}.${singleVariantViewKey}` satisfies OrganismViewKey;
const view = ServerSide.routing.getOrganismView(organismViewKey);

const pageState = view.pageStateHandler.parsePageStateFromUrl(Astro.url);

const variantLapisFilter = view.pageStateHandler.toLapisFilter(pageState);
const datasetLapisFilter = view.pageStateHandler.toLapisFilterWithoutVariant(pageState);
const timeGranularity = chooseGranularityBasedOnDateRange({
    earliestDate: new Date(view.organismConstants.earliestDate),
    dateRange: pageState.datasetFilter.dateFilters[view.organismConstants.mainDateField],
});

const { label: subdivisionLabel, field: subdivisionField } = getLocationSubdivision(
    view.organismConstants.locationFields,
    pageState.datasetFilter.location,
);

const noVariantSelected = hasOnlyUndefinedValues(pageState.variantFilter);

const lineageFilterFields = getLineageFilterFields(view.organismConstants.lineageFilters);

const displayName = toDisplayName(pageState.variantFilter);
const downloadLinks = noVariantSelected
    ? []
    : [
          {
              label: `Download accessions of "${displayName}"`,
              filter: variantLapisFilter,
              downloadFileBasename: `${organism}_${sanitizeForFilename(displayName)}_accessions`,
          },
      ];
---

<SingleVariantOrganismPageLayout view={view} downloadLinks={downloadLinks}>
    <SingleVariantPageStateSelector
        slot='filters'
        locationFilterConfig={{
            locationFields: view.organismConstants.locationFields,
            placeholderText: 'Sampling location',
            label: 'Sampling location',
        }}
        organismViewKey={organismViewKey}
        organismsConfig={getDashboardsConfig().dashboards.organisms}
        pageState={pageState}
        client:only='react'
    >
        <AnalyzeSingleVariantSelectorFallback slot='fallback' />
    </SingleVariantPageStateSelector>

    <div class='mx-[8px] flex flex-col gap-y-6' slot='dataDisplay'>
        {
            noVariantSelected && (
                <SelectVariant>
                    <QuickstartLinks view={view} />
                </SelectVariant>
            )
        }
        <GsStatistics numeratorFilter={variantLapisFilter} denominatorFilter={datasetLapisFilter} />
        <ComponentsGrid>
            <GsPrevalenceOverTime
                numeratorFilters={[
                    {
                        displayName: '',
                        lapisFilter: variantLapisFilter,
                    },
                ]}
                denominatorFilter={datasetLapisFilter}
                lapisDateField={view.organismConstants.mainDateField}
                granularity={timeGranularity}
                pageSize={10}
            />
            <GsMutations
                lapisFilter={variantLapisFilter}
                baselineLapisFilter={datasetLapisFilter}
                sequenceType='nucleotide'
                pageSize={10}
            />
            <GsMutations
                lapisFilter={variantLapisFilter}
                baselineLapisFilter={datasetLapisFilter}
                sequenceType='amino acid'
                pageSize={10}
            />
            {
                subdivisionField !== undefined && (
                    <GsAggregate
                        title={subdivisionLabel}
                        fields={[subdivisionField]}
                        lapisFilter={variantLapisFilter}
                        views={[views.table, views.bar]}
                        pageSize={10}
                    />
                )
            }

            {
                lineageFilterFields.length > 0 && (
                    <GsAggregate
                        title='Sub-lineages'
                        fields={lineageFilterFields}
                        lapisFilter={variantLapisFilter}
                        views={[views.table, views.bar]}
                        pageSize={10}
                    />
                )
            }
            <GsAggregate
                title='Hosts'
                fields={[view.organismConstants.hostField]}
                lapisFilter={variantLapisFilter}
                views={[views.table, views.bar]}
                pageSize={10}
            />
        </ComponentsGrid>
        <GsMutationsOverTime
            lapisFilter={variantLapisFilter}
            sequenceType='nucleotide'
            granularity={timeGranularity}
            lapisDateField={view.organismConstants.mainDateField}
        />
        <GsMutationsOverTime
            lapisFilter={variantLapisFilter}
            sequenceType='amino acid'
            granularity={timeGranularity}
            lapisDateField={view.organismConstants.mainDateField}
        />
    </div>
</SingleVariantOrganismPageLayout>
