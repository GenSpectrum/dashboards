---
import SelectVariant from './SelectVariant.astro';
import { getDashboardsConfig } from '../../../config';
import SingleVariantOrganismPageLayout from '../../../layouts/OrganismPage/SingleVariantOrganismPageLayout.astro';
import { chooseGranularityBasedOnDateRange } from '../../../util/chooseGranularityBasedOnDateRange';
import { hasOnlyUndefinedValues } from '../../../util/hasOnlyUndefinedValues';
import { getLineageFilterFields, getVariantFilterConfig } from '../../../views/View';
import { getLocationSubdivision } from '../../../views/locationHelpers';
import { toDisplayName } from '../../../views/pageStateHandlers/PageStateHandler';
import { type OrganismViewKey, type OrganismWithViewKey } from '../../../views/routing';
import { ServerSide } from '../../../views/serverSideRouting';
import { singleVariantViewKey } from '../../../views/viewKeys';
import ComponentsGrid from '../../ComponentsGrid.astro';
import GsAggregate from '../../genspectrum/GsAggregate.astro';
import GsMutations from '../../genspectrum/GsMutations.astro';
import GsMutationsOverTime from '../../genspectrum/GsMutationsOverTime.astro';
import GsPrevalenceOverTime from '../../genspectrum/GsPrevalenceOverTime.astro';
import GsStatistics from '../../genspectrum/GsStatistics.astro';
import { AnalyzeSingleVariantSelectorFallback } from '../../pageStateSelectors/FallbackElement';
import { SingleVariantPageStateSelector } from '../../pageStateSelectors/SingleVariantPageStateSelector';
import { sanitizeForFilename } from '../compareSideBySide/toDownloadLink';

type OrganismViewCompareVariant = OrganismWithViewKey<typeof singleVariantViewKey>;
interface Props {
    organism: OrganismViewCompareVariant;
}

const { organism } = Astro.props;
const organismViewKey = `${organism}.${singleVariantViewKey}` satisfies OrganismViewKey;
const view = ServerSide.routing.getOrganismView(organismViewKey);

const pageState = view.pageStateHandler.parsePageStateFromUrl(Astro.url);

const variantLapisFilter = view.pageStateHandler.toLapisFilter(pageState);
const datasetLapisFilter = view.pageStateHandler.toLapisFilterWithoutVariant(pageState);
const timeGranularity = chooseGranularityBasedOnDateRange(
    pageState.datasetFilter.dateRange,
    new Date(view.organismConstants.earliestDate),
);

const { label: subdivisionLabel, field: subdivisionField } = getLocationSubdivision(
    view.organismConstants.locationFields,
    pageState.datasetFilter.location,
);

const variantFilterConfig = getVariantFilterConfig(
    view.organismConstants.lineageFilters,
    pageState.variantFilter,
    view.organismConstants.useAdvancedQuery,
);

const noVariantSelected = hasOnlyUndefinedValues(pageState.variantFilter);

const displayName = toDisplayName(pageState.variantFilter);
const downloadLinks = noVariantSelected
    ? []
    : [
          {
              label: `Download accessions of "${displayName}"`,
              filter: variantLapisFilter,
              downloadFileBasename: `${organism}_${sanitizeForFilename(displayName)}_accessions`,
          },
      ];
---

<SingleVariantOrganismPageLayout view={view} downloadLinks={downloadLinks}>
    <SingleVariantPageStateSelector
        slot='filters'
        locationFilterConfig={{
            locationFields: view.organismConstants.locationFields,
            initialLocation: pageState.datasetFilter.location,
            placeholderText: 'Sampling location',
        }}
        dateRangeFilterConfig={{
            initialDateRange: pageState.datasetFilter.dateRange,
            dateRangeOptions: view.organismConstants.dateRangeOptions,
            earliestDate: view.organismConstants.earliestDate,
            dateColumn: view.organismConstants.mainDateField,
        }}
        variantFilterConfig={variantFilterConfig}
        organismViewKey={organismViewKey}
        organismsConfig={getDashboardsConfig().dashboards.organisms}
        client:only='react'
        lapisFilter={variantLapisFilter}
    >
        <AnalyzeSingleVariantSelectorFallback slot='fallback' />
    </SingleVariantPageStateSelector>

    {
        noVariantSelected ? (
            <SelectVariant slot='dataDisplay' />
        ) : (
            <div class='mx-[8px] flex flex-col gap-y-6' slot='dataDisplay'>
                <GsStatistics numeratorFilter={variantLapisFilter} denominatorFilter={datasetLapisFilter} />
                <ComponentsGrid>
                    <GsPrevalenceOverTime
                        numeratorFilters={[
                            {
                                displayName: '',
                                lapisFilter: variantLapisFilter,
                            },
                        ]}
                        denominatorFilter={datasetLapisFilter}
                        lapisDateField={view.organismConstants.mainDateField}
                        granularity={timeGranularity}
                    />
                    <GsMutations
                        lapisFilter={variantLapisFilter}
                        baselineLapisFilter={datasetLapisFilter}
                        sequenceType='nucleotide'
                    />
                    <GsMutations
                        lapisFilter={variantLapisFilter}
                        baselineLapisFilter={datasetLapisFilter}
                        sequenceType='amino acid'
                    />
                    {subdivisionField !== undefined && (
                        <GsAggregate
                            title={subdivisionLabel}
                            fields={[subdivisionField]}
                            lapisFilter={variantLapisFilter}
                        />
                    )}
                    <GsAggregate
                        title='Clades and lineages'
                        fields={getLineageFilterFields(view.organismConstants.lineageFilters)}
                        lapisFilter={variantLapisFilter}
                    />
                    <GsAggregate
                        title='Hosts'
                        fields={[view.organismConstants.hostField]}
                        lapisFilter={variantLapisFilter}
                    />
                </ComponentsGrid>
                <GsMutationsOverTime
                    lapisFilter={variantLapisFilter}
                    sequenceType='nucleotide'
                    granularity={timeGranularity}
                    lapisDateField={view.organismConstants.mainDateField}
                />
                <GsMutationsOverTime
                    lapisFilter={variantLapisFilter}
                    sequenceType='amino acid'
                    granularity={timeGranularity}
                    lapisDateField={view.organismConstants.mainDateField}
                />
            </div>
        )
    }
</SingleVariantOrganismPageLayout>
