---
import SelectVariant from './SelectVariant.astro';
import { getDashboardsConfig } from '../../../config';
import SingleVariantOrganismPageLayout from '../../../layouts/OrganismPage/SingleVariantOrganismPageLayout.astro';
import type { Organism } from '../../../types/Organism';
import { chooseGranularityBasedOnDateRange } from '../../../util/chooseGranularityBasedOnDateRange';
import { hasOnlyUndefinedValues } from '../../../util/hasOnlyUndefinedValues';
import { defaultTablePageSize, getLineageFilterConfigs, getLineageFilterFields } from '../../../views/View';
import { getLocationSubdivision } from '../../../views/helpers';
import { type OrganismViewKey } from '../../../views/routing';
import { ServerSide } from '../../../views/serverSideRouting';
import { type singleVariantViewKey } from '../../../views/viewKeys';
import ComponentHeadline from '../../ComponentHeadline.astro';
import ComponentWrapper from '../../ComponentWrapper.astro';
import ComponentsGrid from '../../ComponentsGrid.astro';
import { SingleVariantPageStateSelector } from '../../pageStateSelectors/SingleVariantPageStateSelector';

interface Props {
    organismViewKey: Extract<OrganismViewKey, `${Organism}.${typeof singleVariantViewKey}`>;
}

const { organismViewKey } = Astro.props;
const view = ServerSide.routing.getOrganismView(organismViewKey);

const pageState = view.pageStateHandler.parsePageStateFromUrl(Astro.url);

const variantLapisFilter = view.pageStateHandler.toLapisFilter(pageState);
const datasetLapisFilter = view.pageStateHandler.toLapisFilterWithoutVariant(pageState);
const timeGranularity = chooseGranularityBasedOnDateRange(
    pageState.datasetFilter.dateRange,
    new Date(view.organismConstants.earliestDate),
);

const { label: subdivisionLabel, field: subdivisionField } = getLocationSubdivision(
    view.organismConstants.locationFields,
    pageState.datasetFilter.location,
);

const lineageFilterConfigs = getLineageFilterConfigs(
    view.organismConstants.lineageFilters,
    pageState.variantFilter.lineages,
);

const noVariantSelected = hasOnlyUndefinedValues(pageState.variantFilter);
---

<SingleVariantOrganismPageLayout view={view}>
    <SingleVariantPageStateSelector
        slot='filters'
        locationFilterConfig={{
            locationFields: view.organismConstants.locationFields,
            initialLocation: pageState.datasetFilter.location,
            placeholderText: 'Sampling location',
        }}
        dateRangeFilterConfig={{
            initialDateRange: pageState.datasetFilter.dateRange,
            dateRangeOptions: view.organismConstants.dateRangeOptions,
            earliestDate: view.organismConstants.earliestDate,
            dateColumn: view.organismConstants.mainDateField,
        }}
        variantFilterConfig={{
            mutationFilterConfig: pageState.variantFilter.mutations,
            lineageFilterConfigs,
        }}
        organismViewKey={organismViewKey}
        organismsConfig={getDashboardsConfig().dashboards.organisms}
        client:only='react'
    />

    {
        noVariantSelected ? (
            <SelectVariant slot='dataDisplay' />
        ) : (
            <div class='mx-[8px] flex flex-col gap-y-6' slot='dataDisplay'>
                <div class='h-56 sm:h-32'>
                    <ComponentHeadline>Stats</ComponentHeadline>
                    <gs-statistics
                        numeratorFilter={JSON.stringify(variantLapisFilter)}
                        denominatorFilter={JSON.stringify(datasetLapisFilter)}
                        width='100%'
                        height='100%'
                    />
                </div>
                <ComponentsGrid>
                    <ComponentWrapper title='Prevalence over time'>
                        <gs-prevalence-over-time
                            numeratorFilter={JSON.stringify({
                                displayName: '',
                                lapisFilter: variantLapisFilter,
                            })}
                            denominatorFilter={JSON.stringify(datasetLapisFilter)}
                            lapisDateField={view.organismConstants.mainDateField}
                            granularity={timeGranularity}
                            smoothingWindow='0'
                            pageSize={defaultTablePageSize}
                            width='100%'
                            height='100%'
                        />
                    </ComponentWrapper>
                    <ComponentWrapper title='Nucleotide mutations'>
                        <gs-mutations
                            lapisFilter={JSON.stringify(variantLapisFilter)}
                            sequenceType='nucleotide'
                            views='["grid", "table", "insertions"]'
                            pageSize={defaultTablePageSize}
                            width='100%'
                            height='100%'
                        />
                    </ComponentWrapper>
                    <ComponentWrapper title='Amino acid mutations'>
                        <gs-mutations
                            lapisFilter={JSON.stringify(variantLapisFilter)}
                            sequenceType='amino acid'
                            views='["grid", "table", "insertions"]'
                            pageSize={defaultTablePageSize}
                            width='100%'
                            height='100%'
                        />
                    </ComponentWrapper>
                    {subdivisionField !== undefined && (
                        <ComponentWrapper title={subdivisionLabel}>
                            <gs-aggregate
                                fields={JSON.stringify([subdivisionField])}
                                filter={JSON.stringify(variantLapisFilter)}
                                pageSize={defaultTablePageSize}
                                width='100%'
                                height='100%'
                            />
                        </ComponentWrapper>
                    )}
                    <ComponentWrapper title='Clades and lineages'>
                        <gs-aggregate
                            fields={JSON.stringify(getLineageFilterFields(view.organismConstants.lineageFilters))}
                            filter={JSON.stringify(variantLapisFilter)}
                            pageSize={defaultTablePageSize}
                            width='100%'
                            height='100%'
                        />
                    </ComponentWrapper>
                    <ComponentWrapper title='Hosts'>
                        <gs-aggregate
                            fields={JSON.stringify([view.organismConstants.hostField])}
                            filter={JSON.stringify(variantLapisFilter)}
                            pageSize={defaultTablePageSize}
                            width='100%'
                            height='100%'
                        />
                    </ComponentWrapper>
                </ComponentsGrid>
                <ComponentWrapper title='Nucleotide mutations over time' height='600px'>
                    <gs-mutations-over-time
                        width='100%'
                        height='100%'
                        lapisFilter={JSON.stringify(variantLapisFilter)}
                        sequenceType='nucleotide'
                        views='["grid"]'
                        granularity={timeGranularity}
                        lapisDateField={view.organismConstants.mainDateField}
                    />
                </ComponentWrapper>

                <ComponentWrapper title='Amino acid mutations over time' height='600px'>
                    <gs-mutations-over-time
                        width='100%'
                        height='100%'
                        lapisFilter={JSON.stringify(variantLapisFilter)}
                        sequenceType='amino acid'
                        views='["grid"]'
                        granularity={timeGranularity}
                        lapisDateField={view.organismConstants.mainDateField}
                    />
                </ComponentWrapper>
            </div>
        )
    }
</SingleVariantOrganismPageLayout>
