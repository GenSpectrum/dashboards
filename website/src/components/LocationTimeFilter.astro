---
import { isCustomDateRange } from '../routes/helpers';
import type { DateRange } from '../routes/helpers';

interface Props {
    fields: string[];
    initialLocation: any;
    initialDateRange: DateRange;
    earliestDate: string;
    customDateRangeOptions: {
        label: string;
        dateFrom: string;
        dateTo: string;
    }[];
}

const { fields, initialLocation, initialDateRange, earliestDate, customDateRangeOptions } = Astro.props;

const initialLocationValue = fields
    .map((field) => initialLocation[field])
    .filter(Boolean)
    .join(' / ');
const initialDateRangeValue = isCustomDateRange(initialDateRange) ? 'custom' : initialDateRange;
const initialDateRangeFrom = isCustomDateRange(initialDateRange) ? initialDateRange.from : undefined;
const initialDateRangeTo = isCustomDateRange(initialDateRange) ? initialDateRange.to : undefined;
---

<location-time-filter data-message={JSON.stringify({ location: initialLocation, dateRange: initialDateRange })}>
    <div class='flex flex-wrap items-stretch gap-2'>
        <gs-location-filter
            id='locationFilter'
            fields={JSON.stringify(fields)}
            initialValue={initialLocationValue}
            placeholderText='Sampling location'
            width='280px'></gs-location-filter>
        <gs-date-range-selector
            id='dateRangeSelector'
            customSelectOptions={JSON.stringify(customDateRangeOptions)}
            earliestDate={earliestDate}
            initialValue={initialDateRangeValue}
            initialDateFrom={initialDateRangeFrom}
            initialDateTo={initialDateRangeTo}
            dateColumn='date'></gs-date-range-selector>
        <button
            id='locationTimeFilterSubmitButton'
            class='flex-1 rounded-lg border bg-white p-4 hover:bg-amber-200'
            type='submit'
        >
            Submit
        </button>
    </div>
</location-time-filter>

<script>
    import { Routing } from '../routes/routing.ts';

    class LocationTimeFilter extends HTMLElement {
        constructor() {
            super();
            let { location, dateRange } = JSON.parse(this.dataset.message!);
            const locationFilter = document.getElementById('locationFilter');
            const dateRangeSelector = document.getElementById('dateRangeSelector');
            const submitButton = document.getElementById('locationTimeFilterSubmitButton');

            locationFilter?.addEventListener('gs-location-changed', (event: CustomEvent) => {
                location = event.detail;
            });

            dateRangeSelector?.addEventListener('gs-date-range-changed', (event: CustomEvent) => {
                dateRange = {
                    from: event.detail.dateFrom,
                    to: event.detail.dateTo,
                };
            });

            submitButton?.addEventListener('click', () => {
                // TODO This component currently assumes that it is used under a route that has a baseline filter.
                //  We should either make it more flexible or document the behavior
                const currentRoute = Routing.getCurrentRouteInBrowser() as any;
                const newRoute = {
                    ...currentRoute,
                    baselineFilter: {
                        ...currentRoute.baselineFilter,
                        location,
                        dateRange,
                    },
                };
                Routing.navigateTo(newRoute);
            });
        }
    }

    customElements.define('location-time-filter', LocationTimeFilter);
</script>
