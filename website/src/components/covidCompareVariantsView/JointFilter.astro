---
import { getDashboardsConfig } from '../../config';
import { type LapisLocation, type LapisMutationQuery, isCustomDateRange, type DateRange } from '../../views/helpers';
import { ServerSide } from '../../views/serverSideRouting';

interface Props {
    filterId: number;
    initialLocation: LapisLocation;
    initialDateRange: DateRange;
    initialLineage?: string;
    initialMutations: LapisMutationQuery;
}

const { filterId, initialLocation, initialLineage, initialDateRange, initialMutations } = Astro.props;

const view = ServerSide.routing.getOrganismView('covid.compareVariantsView');

const initialLocationValue = Object.values(initialLocation).filter(Boolean).join(' / ');
const initialDateRangeValue = isCustomDateRange(initialDateRange) ? 'custom' : initialDateRange;
const initialDateRangeFrom = isCustomDateRange(initialDateRange) ? initialDateRange.from : undefined;
const initialDateRangeTo = isCustomDateRange(initialDateRange) ? initialDateRange.to : undefined;
---

<joint-filter
    data-message={JSON.stringify({
        filterId,
        location: initialLocation,
        dateRange: initialDateRange,
        lineage: initialLineage,
        mutations: initialMutations,
    })}
    data-organisms-config={JSON.stringify(getDashboardsConfig().dashboards.organisms)}
>
    <div>
        <div class='flex'>
            <div class='flex flex-1 flex-col gap-2 bg-blue-50 px-2 py-4'>
                <div class='font-semibold'>Filter dataset:</div>
                <gs-location-filter
                    id={`locationFilter${filterId}`}
                    fields={JSON.stringify(view.locationFields)}
                    initialValue={initialLocationValue}
                    placeholderText='Sampling location'
                    width='100%'></gs-location-filter>
                <gs-date-range-selector
                    id={`dateRangeSelector${filterId}`}
                    customSelectOptions={JSON.stringify(view.customDateRangeOptions)}
                    earliestDate={view.earliestDate}
                    initialValue={initialDateRangeValue}
                    initialDateFrom={initialDateRangeFrom}
                    initialDateTo={initialDateRangeTo}
                    dateColumn={view.mainDateField}></gs-date-range-selector>
            </div>
            <div class='flex flex-1 flex-col border-l-2 bg-green-50 px-2 py-4'>
                <div class='mb-2 font-semibold'>Search variant:</div>
                <gs-lineage-filter
                    id={`lineageFilter${filterId}`}
                    lapisField={view.lineageField}
                    placeholderText='Pango Lineage'
                    initialValue={initialLineage}
                    width='100%'
                >
                </gs-lineage-filter>
                <div class='mt-2 rounded-md bg-white'>
                    <gs-mutation-filter
                        id={`mutationFilter${filterId}`}
                        initialValue={JSON.stringify(initialMutations)}
                    >
                    </gs-mutation-filter>
                </div>
            </div>
        </div>
        <button
            id={`submitButton${filterId}`}
            class='mt-2 w-full rounded-lg border bg-white p-4 hover:bg-amber-200'
            type='submit'
        >
            Submit
        </button>
    </div>
</joint-filter>

<script>
    import { Routing } from '../../views/routing.ts';
    import { getClientLogger } from '../../clientLogger';

    class JointFilter extends HTMLElement {
        constructor() {
            super();
            let { filterId, location, dateRange, lineage, mutations } = JSON.parse(this.dataset.message!);
            const config = JSON.parse(this.dataset.organismsConfig!);
            const locationFilter = document.getElementById(`locationFilter${filterId}`);
            const dateRangeSelector = document.getElementById(`dateRangeSelector${filterId}`);
            const lineageFilter = document.getElementById(`lineageFilter${filterId}`);
            const mutationFilter = document.getElementById(`mutationFilter${filterId}`);
            const submitButton = document.getElementById(`submitButton${filterId}`);

            locationFilter?.addEventListener('gs-location-changed', (event: CustomEvent) => {
                location = event.detail;
            });

            dateRangeSelector?.addEventListener('gs-date-range-changed', (event: CustomEvent) => {
                dateRange = {
                    from: event.detail.dateFrom,
                    to: event.detail.dateTo,
                };
            });

            lineageFilter?.addEventListener('gs-lineage-filter-changed', (event: CustomEvent) => {
                lineage = event.detail.nextcladePangoLineage;
            });

            mutationFilter?.addEventListener('gs-mutation-filter-changed', (event: CustomEvent) => {
                mutations = event.detail;
            });

            submitButton?.addEventListener('click', () => {
                const routing = new Routing(config, getClientLogger);
                const compareVariantsView = routing.getOrganismView('covid.compareVariantsView');
                const currentPageState = compareVariantsView.parsePageStateFromUrl(new URL(window.location.href));
                if (currentPageState === undefined) {
                    getClientLogger('JointFilter').error(
                        `Failed to parse URL for joint filter, got ${currentPageState}`,
                    );
                    return;
                }
                const newFilter = compareVariantsView.setFilter(
                    currentPageState,
                    {
                        baselineFilter: {
                            location,
                            dateRange,
                        },
                        variantFilter: { lineage, ...mutations },
                    },
                    filterId,
                );
                window.location.href = compareVariantsView.toUrl(newFilter);
            });
        }
    }

    customElements.define('joint-filter', JointFilter);
</script>
