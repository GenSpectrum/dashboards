---
import type { LapisMutationQuery } from '../routes/helpers';
import { type Field } from './VariantFilterTypes';

interface Props {
    fields: Field[];
    initialMutations: LapisMutationQuery;
}

const { fields, initialMutations } = Astro.props;
---

<variant-filter data-message={JSON.stringify({ fields })}>
    <div class='flex flex-col items-stretch gap-2'>
        {
            fields.map((field) =>
                field.type === 'text' ? (
                    <gs-text-input
                        id={`${field.name}Filter`}
                        lapisField={field.name}
                        placeholderText={field.label}
                        initialValue={field.initialValue ?? ''}
                        width='100%'
                    />
                ) : (
                    <gs-lineage-filter
                        id={`${field.name}Filter`}
                        lapisField={field.name}
                        placeholderText={field.label}
                        initialValue={field.initialValue ?? ''}
                        width='100%'
                    />
                ),
            )
        }
        <div class='rounded-md bg-white'>
            <gs-mutation-filter id='mutationFilter' initialValue={JSON.stringify(initialMutations)}
            ></gs-mutation-filter>
        </div>
        <button id='variantFilterSubmitButton' class='rounded-lg border bg-white p-4 hover:bg-amber-200' type='submit'>
            Submit
        </button>
    </div>
</variant-filter>

<script>
    import { Routing } from '../routes/routing.ts';
    import { type Field } from './VariantFilterTypes';

    class VariantFilter extends HTMLElement {
        constructor() {
            super();
            const { fields } = JSON.parse(this.dataset.message!) as { fields: Field[] };
            let values: Record<string, string | undefined> = {};
            for (const field of fields) {
                values[field.name] = field.initialValue;
            }

            const submitButton = document.getElementById('variantFilterSubmitButton');
            const mutationFilter = document.getElementById('mutationFilter');

            fields.map((field) => {
                const filterElement = document.getElementById(`${field.name}Filter`);
                const eventName = field.type === 'text' ? 'gs-text-input-changed' : 'gs-lineage-filter-changed';
                filterElement?.addEventListener(eventName, (event: CustomEvent) => {
                    values[field.name] = event.detail[field.name];
                });
            });

            mutationFilter?.addEventListener('gs-mutation-filter-changed', (event: CustomEvent) => {
                values = { ...values, ...event.detail };
            });

            submitButton?.addEventListener('click', () => {
                const currentRoute = Routing.getCurrentRouteInBrowser()!;
                const newRoute = {
                    ...currentRoute,
                    variantFilter: values,
                };
                Routing.navigateTo(newRoute);
            });
        }
    }

    customElements.define('variant-filter', VariantFilter);
</script>
